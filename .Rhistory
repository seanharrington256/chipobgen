# Predict values and confidence intervals
predicted_data <- data.frame(Termp = data$Termp)
predicted_data$Protection <- predict(segmented_model, newdata = predicted_data, interval = "confidence")
library(ggplot2)
# Create a ggplot with geom_point to plot the data points
p <- ggplot(data, aes(x = Termp, y = Protection)) +
geom_point()
p
p + geom_line(data = predicted_data, aes(x = Termp, y = Protection), color = "blue")
predicted_data
# Add the segmented line to the plot
p + geom_line(data = predicted_data, aes(x = Termp, y = Protection.fit), color = "blue") +
geom_ribbon(data = predicted_data, aes(x = Termp, ymin = lwr, ymax = upr), fill = "blue", alpha = 0.3)
predicted_data
p + geom_line(data = predicted_data, aes(x = Termp, y = Protection.fit), color = "blue")
predicted_data
predicted_data$Protection
p + geom_line(data = predicted_data$Protection, aes(x = Termp, y = fit), color = "blue")
class(predicted_data$Protection)
# Predict values and confidence intervals
predicted_data <- data.frame(Termp = data$Termp)
predicted_data <- predict(segmented_model, newdata = predicted_data, interval = "confidence")
library(ggplot2)
# Predict values and confidence intervals
predicted_data <- data.frame(Termp = data$Termp)
predicted_data <- predict(segmented_model, newdata = predicted_data, interval = "confidence")
library(ggplot2)
# Create a ggplot with geom_point to plot the data points
p <- ggplot(data, aes(x = Termp, y = Protection)) +
geom_point()
# Add the segmented line to the plot
p + geom_line(data = predicted_data, aes(x = Termp, y = fit), color = "blue") +
geom_ribbon(data = predicted_data, aes(x = Termp, ymin = lwr, ymax = upr), fill = "blue", alpha = 0.3)
predicted_data$Protection <- as.data.frame(predicted_data$Protection)
predicted_data$Protection
# Predict values and confidence intervals
predicted_data <- data.frame(Termp = data$Termp)
predicted_data$Protection <- predict(segmented_model, newdata = predicted_data, interval = "confidence")
predicted_data$Protection <- as.data.frame(predicted_data$Protection)
predicted_data$Protection
class(predicted_data$Protection)
library(ggplot2)
# Create a ggplot with geom_point to plot the data points
p <- ggplot(data, aes(x = Termp, y = Protection)) +
geom_point()
# Add the segmented line to the plot
p + geom_line(data = predicted_data$Protection, aes(x = Termp, y = fit), color = "blue") +
geom_ribbon(data = predicted_data$Protection, aes(x = Termp, ymin = lwr, ymax = upr), fill = "blue", alpha = 0.3)
# Predict values and confidence intervals
predicted_data1 <- data.frame(Termp = data$Termp)
predicted_data <- cbind(predicted_data1, predict(segmented_model, newdata = predicted_data1, interval = "confidence"))
predicted_data
class(predicted_data)
# Predict values and confidence intervals
predicted_data1 <- data.frame(Termp = data$Termp)
predicted_data <- cbind(predicted_data1, predict(segmented_model, newdata = predicted_data1, interval = "confidence"))
predicted_data
# Fit segmented regression model
model <- lm(Protection ~ Termp, data = data)
segmented_model <- segmented(model, seg.Z = ~Termp)
# Predict values and confidence intervals
predicted_data1 <- data.frame(Termp = data$Termp)
predicted_data <- cbind(predicted_data1, predict(segmented_model, newdata = predicted_data1, interval = "confidence"))
library(ggplot2)
# Create a ggplot with geom_point to plot the data points
p <- ggplot(data, aes(x = Termp, y = Protection)) +
geom_point()
# Add the segmented line to the plot
p + geom_line(data = predicted_data, aes(x = Termp, y = fit), color = "blue") +
geom_ribbon(data = predicted_data, aes(x = Termp, ymin = lwr, ymax = upr), fill = "blue", alpha = 0.3)
data
# Create a ggplot with geom_point to plot the data points
p <- ggplot(data, aes(x = Termp, y = Protection)) +
geom_point()
p + geom_line(data = predicted_data, aes(x = Termp, y = fit), color = "blue")
# Add the segmented line to the plot
p + geom_line(data = predicted_data, aes(x = Termp, y = fit), color = "blue") +
geom_ribbon(data = predicted_data, aes(x = Termp, ymin = lwr, ymax = upr), fill = "blue", alpha = 0.3)
predicted_data
# Add the segmented line to the plot
p + geom_line(data = predicted_data, aes(x = Termp, y = fit), color = "blue") +
geom_ribbon(data = predicted_data, aes(x = Termp, y = fit, ymin = lwr, ymax = upr), fill = "blue", alpha = 0.3)
# Sample data
data <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Y = c(5, 5, 5, 5, 5, 5, 12, 14, 16, 18)  # Y changes at X = 7
)
# Fit a step function model
model <- nls(Y ~ ifelse(X < threshold, a, b), data = data, start = list(a = 5, b = 12, threshold = 7))
# Fit a step function model
model <- nls(Y ~ ifelse(X < threshold, a, b), data = data, start = list(a = 5, b = 18, threshold = 7))
# Fit a step function model
model <- nls(Y ~ ifelse(X < threshold, a, b), data = data, start = list(a = 5, b = 18, threshold = 7),
lower = c(a = -Inf, b = -Inf, threshold = 1), upper = c(a = Inf, b = Inf, threshold = 10))
plot(data$y ~ dat$x)
# Sample data
data <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Y = c(5, 5, 5, 5, 5, 5, 12, 14, 16, 18)  # Y changes at X = 7
)
plot(data$y ~ dat$x)
plot(data$y ~ data$x)
plot(data$Y ~ data$X)
# Sample data
data <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Y = c(5, 5, 5, 5, 5, 5, 15, 15, 16, 18)  # Y changes at X = 7
)
# Sample data
data <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Y = c(5, 5, 5, 5, 5, 5, 15, 15, 16, 18)  # Y changes at X = 7
)
# Sample data
data <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Y = c(5, 5, 5, 5, 5, 5, 15, 15, 16, 18)  # Y changes at X = 7
)
# Sample data
data <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Y = c(5, 5, 5, 5, 5, 5, 15, 15, 16, 18)  # Y changes at X = 7
)
data <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Y = c(5, 5, 5, 5, 5, 5, 15, 15, 16, 18)  # Y changes at X = 7
)
data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Y = c(5, 5, 5, 5, 5, 5, 15, 15, 16, 18)  # Y changes at X = 7
)
# Sample data
data <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Y = c(5, 5, 5, 5, 5, 5, 15, 15, 16, 18)  # Y changes at X = 7
)
rm(data)
data
data
dat
# Sample data
dat <- data.frame(
X = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
Y = c(5, 5, 5, 5, 5, 5, 15, 15, 16, 18)  # Y changes at X = 7
)
plot(dat$Y ~ dat$X)
fit <- nls(y ~ SSlogis(x, Asym, xmid, scal), data = dat)
?nls
fit <- nls(y ~ SSlogis(x, Asym, xmid, scal), data = dat, algorithm='port')
fit <- nls(y ~ SSlogis(x, Asym, xmid, scal), data = dat, algorithm='robust')
plot(dat$Y ~ dat$X)
fit <- nls(y ~ SSlogis(x, Asym, xmid, scal), data = dat, algorithm='port')
library(dplyr)
library(purrr)
library(ggplot2)
library(Polychrome)
##go to directory with all of the stiarway plot table showing median Ne, Year etc.
setwd("~/Active_Research/Ecotone_genomics/GBS_Data/Coexp_dryad/stairwayplot2/StairwayOuts_2023_09_12")
# get the summary files
sum_files <- list.files(pattern = "summary")
# read them all in
results <- lapply(sum_files, read.table, header=TRUE)
names(results) <- gsub(".final.summary", "", sum_files) # give population name as name of each element of the list
# For each element of the list, add a column that is just the population name
named_res <-  imap(results, ~mutate(.x, lineage = .y))
# collapse it into a single dataframe
result_df <- bind_rows(named_res)
result_df$lineage <- factor(result_df$lineage) # make the lineage a factor
# Do some transformation
result_df <- mutate(result_df, kya = year/1000)
result_df <- mutate(result_df, logNe = log(Ne_median))
# Plot it out x axis is year and y axis is median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "median Ne") +
theme_classic()
# create your own color palette based on `seedcolors`
colX = createPalette(36,  c("#ff0000", "#00ff00", "#0000ff"))
names(colX) <- NULL # remove names
# Plot it out x axis is year and y axis is median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "median Ne") +
theme_classic()
sum_files <- list.files(pattern = "summary")
# read them all in
results <- lapply(sum_files, read.table, header=TRUE)
names(results) <- gsub(".final.summary", "", sum_files) # give population name as name of each element of the list
# For each element of the list, add a column that is just the population name
named_res <-  imap(results, ~mutate(.x, lineage = .y))
# collapse it into a single dataframe
result_df <- bind_rows(named_res)
result_df$lineage <- factor(result_df$lineage) # make the lineage a factor
# Do some transformation
result_df <- mutate(result_df, kya = year/1000)
result_df <- mutate(result_df, logNe = log10(Ne_median))
# create your own color palette based on `seedcolors`
colX = createPalette(36,  c("#ff0000", "#00ff00", "#0000ff"))
names(colX) <- NULL # remove names
# Plot it out x axis is thousand years ago and y axis is median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "median Ne") +
theme_classic()
result_df <- mutate(result_df, logNe = log(Ne_median))
# Plot it out x axis is thousand years ago and y axis is median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "median Ne") +
theme_classic()
# Plot it out x axis is thousand years ago and y axis is median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
theme_classic()
names(results)
names(results) <- gsub(, , names(results))
names(results) <- gsub(, , names(results))
# Do some kludgy renaming:
names(results) <- gsub("Acontortrix_east", "A. contortrix - east", names(results))
names(results) <- gsub("Acontortrix_west", "A. contortrix - west", names(results))
names(results) <- gsub("Dpunctatus_central", "D. punctatus - central", names(results))
names(results) <- gsub("Dpunctatus_north", "D. punctatus - north", names(results))
names(results) <- gsub("Dpunctatus_south", "D. punctatus - south", names(results))
names(results) <- gsub("F_abacura__west", "F. abacura - west", names(results))
names(results) <- gsub("F_abacura_east", "F. abacura - east", names(results))
names(results) <- gsub("F_erytrogramma", "F. erytrogramma", names(results))
names(results) <- gsub("Lelapsoides", "L. elapsoides", names(results))
names(results) <- gsub("Lgetula_central", "L. getula nigra", names(results))
names(results) <- gsub("Lgetula_east", "L. getula getula", names(results))
names(results) <- gsub("Lgetula_holb", "L. getula holbrooki", names(results))
names(results) <- gsub("Ltriangulum", "L. triangulum", names(results))
names(results) <- gsub("Mflagellum", "M. flagellum", names(results))
names(results) <- gsub("Pemoryi", "P. emoryi", names(results))
names(results) <- gsub("Pguttatus", "P. guttatus", names(results))
names(results) <- gsub("Sdekayi", "S. dekayi", names(results))
# For each element of the list, add a column that is just the population name
named_res <-  imap(results, ~mutate(.x, lineage = .y))
# collapse it into a single dataframe
result_df <- bind_rows(named_res)
result_df$lineage <- factor(result_df$lineage) # make the lineage a factor
# Do some transformation
result_df <- mutate(result_df, kya = year/1000)
result_df <- mutate(result_df, logNe = log(Ne_median))
# create your own color palette based on `seedcolors`
colX = createPalette(36,  c("#ff0000", "#00ff00", "#0000ff"))
names(colX) <- NULL # remove names
# Plot it out x axis is thousand years ago and y axis is median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
theme_classic()
# plot logged Ne - x axis is thousand years ago and y axis is logged median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = Ne_median, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "median Ne") +
theme_classic()
# Plot it out x axis is thousand years ago and y axis is median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
theme_classic()
### TRUNCATED VERSION
# plot logged Ne - x axis is thousand years ago and y axis is logged median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = Ne_median, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "median Ne") +
ylim(9.5, 16)
### TRUNCATED VERSION
# plot logged Ne - x axis is thousand years ago and y axis is logged median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic()
### TRUNCATED VERSION
# plot logged Ne - x axis is thousand years ago and y axis is logged median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic"))
### TRUNCATED VERSION
# plot logged Ne - x axis is thousand years ago and y axis is logged median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic"))
### TRUNCATED VERSION
# plot logged Ne - x axis is thousand years ago and y axis is logged median Ne
yarn_log_trunc <- ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic"))
pdf(file = "yarn_log_trunc.pdf", width = 10, height = 10)
print(yarn_log_trunc)
dev.off()
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic")) +
theme(
legend.position = "top",
legend.justification = "right",
legend.box.just = "right",
legend.margin = margin(t = 0, r = 10, b = 0, l = 0)
)
### TRUNCATED VERSION
# plot logged Ne - x axis is thousand years ago and y axis is logged median Ne
yarn_log_trunc <- ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic")) +
theme(
legend.position = "top",
legend.justification = "right",
legend.box.just = "right",
legend.margin = margin(t = 0, r = 10, b = 0, l = 0)
)
pdf(file = "yarn_log_trunc.pdf", width = 10, height = 10)
print(yarn_log_trunc)
dev.off()
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic")) +
theme(
legend.position = "top",
legend.justification = "right",
legend.box.just = "right",
)
### TRUNCATED VERSION
# plot logged Ne - x axis is thousand years ago and y axis is logged median Ne
yarn_log_trunc <- ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic")) +
theme(
legend.position = "topright",
legend.justification = "right",
legend.box.just = "right",
)
print(yarn_log_trunc)
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic")) +
theme(
legend.position = "topright"
)
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic"))+
theme(
legend.position = "top",
legend.justification = "right",
legend.box.just = "single",
legend.key.width = unit(1, "cm"),
legend.margin = margin(t = 0, r = 10, b = 0, l = 0)
)
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic")) +
theme(
legend.position = "top",
legend.justification = "right",
legend.box = "horizontal",
legend.box.margin = margin(0, 10, 0, 0)
)
yarn_log_trunc <- ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic"))
pdf(file = "yarn_log_trunc.pdf", width = 10, height = 10)
print(yarn_log_trunc)
dev.off()
library(dplyr)
library(purrr)
library(ggplot2)
library(Polychrome)
##go to directory with all of the stiarway plot table showing median Ne, Year etc.
setwd("~/Active_Research/Ecotone_genomics/GBS_Data/Coexp_dryad/stairwayplot2/StairwayOuts_2023_09_12")
# get the summary files
sum_files <- list.files(pattern = "summary")
# read them all in
results <- lapply(sum_files, read.table, header=TRUE)
names(results) <- gsub(".final.summary", "", sum_files) # give population name as name of each element of the list
# Do some kludgy renaming:
names(results) <- gsub("Acontortrix_east", "A. contortrix - east", names(results))
names(results) <- gsub("Acontortrix_west", "A. contortrix - west", names(results))
names(results) <- gsub("Dpunctatus_central", "D. punctatus - central", names(results))
names(results) <- gsub("Dpunctatus_north", "D. punctatus - north", names(results))
names(results) <- gsub("Dpunctatus_south", "D. punctatus - south", names(results))
names(results) <- gsub("F_abacura__west", "F. abacura - west", names(results))
names(results) <- gsub("F_abacura_east", "F. abacura - east", names(results))
names(results) <- gsub("F_erytrogramma", "F. erytrogramma", names(results))
names(results) <- gsub("Lelapsoides", "L. elapsoides", names(results))
names(results) <- gsub("Lgetula_central", "L. getula nigra", names(results))
names(results) <- gsub("Lgetula_east", "L. getula getula", names(results))
names(results) <- gsub("Lgetula_holb", "L. getula holbrooki", names(results))
names(results) <- gsub("Ltriangulum", "L. triangulum", names(results))
names(results) <- gsub("Mflagellum", "M. flagellum", names(results))
names(results) <- gsub("Pemoryi", "P. emoryi", names(results))
names(results) <- gsub("Pguttatus", "P. guttatus", names(results))
names(results) <- gsub("Sdekayi", "S. dekayi", names(results))
# For each element of the list, add a column that is just the population name
named_res <-  imap(results, ~mutate(.x, Lineage = .y))
# collapse it into a single dataframe
result_df <- bind_rows(named_res)
result_df$Lineage <- factor(result_df$Lineage) # make the Lineage a factor
# Do some transformation
result_df <- mutate(result_df, kya = year/1000)
result_df <- mutate(result_df, logNe = log(Ne_median))
# create your own color palette based on `seedcolors`
colX = createPalette(36,  c("#ff0000", "#00ff00", "#0000ff"))
names(colX) <- NULL # remove names
# plot  Ne - x axis is thousand years ago and y axis is median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = Ne_median, color = Lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "median Ne") +
theme_classic() +
theme(legend.text = element_text(face = "italic"))
# plot logged Ne - x axis is thousand years ago and y axis is logged median Ne
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = Lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
theme_classic() +
theme(legend.text = element_text(face = "italic"))
### TRUNCATED VERSION
# plot logged Ne - x axis is thousand years ago and y axis is logged median Ne
yarn_log_trunc <- ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = Lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic"))
pdf(file = "yarn_log_trunc.pdf", width = 10, height = 10)
print(yarn_log_trunc)
dev.off()
ggplot(data = result_df, mapping = aes(x = kya, y = logNe, color = Lineage)) +
geom_line() +
scale_color_manual(values = colX) +
labs(x = "Thosand years ago", y = "log(median Ne)") +
ylim(9.5, 16) +
theme_classic() +
theme(legend.text = element_text(face = "italic"))
# setwd("C:/Users/UW-User/Desktop/")
setwd("~/UWyo/kellyn_chipmunks/Run_sequoia") # Sean's working dir
library(sequoia)
library(kinship2)
library(dplyr)
#setting up file paths
path_sequoia_file <- "chip_c93_branch1Sequoia.u.geno" # file to be made for Sequoia
path_sex_birth_file <- "Sequoia_Sex_Birth_Data_1504_fixed.csv"
#read in genetic data
GenoM <- as.matrix(read.table(path_sequoia_file, row.names=1, header=FALSE))
Sex_Birth <- read.csv(path_sex_birth_file)[,-1]
#  duplicate check & parentage assignment (takes few minutes)
ParOUT <- sequoia(GenoM = GenoM,  LifeHistData = Sex_Birth, Err=0.005,
Module="par", quiet = FALSE, Plot = TRUE)
ParOUT$DupGenotype  # inspect duplicates (intentional or accidental)
# polish dataset:
# remove duplicate indiv. 985113005719233
Geno2 <- GenoM[!rownames(GenoM) %in% "985113005719233",]
Sex_Birth2 <- Sex_Birth[!Sex_Birth$ID %in% "985113005719233",]
